// @generated by Peggy 5.0.4.
//
// https://peggyjs.org/

"use strict";

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    sql: peg$parsesql,
  };
  let peg$startRuleFunction = peg$parsesql;

  const peg$c0 = "select";
  const peg$c1 = "from";
  const peg$c2 = ";";
  const peg$c3 = "insert";
  const peg$c4 = "into";
  const peg$c5 = "(";
  const peg$c6 = ")";
  const peg$c7 = ",";
  const peg$c8 = "values";
  const peg$c9 = "NEWID()";
  const peg$c10 = "as";
  const peg$c11 = ".";
  const peg$c12 = "*";
  const peg$c13 = "[";
  const peg$c14 = "].[";
  const peg$c15 = "]";
  const peg$c16 = "COUNT(";
  const peg$c17 = "inner";
  const peg$c18 = "left";
  const peg$c19 = "outer";
  const peg$c20 = "right";
  const peg$c21 = "join";
  const peg$c22 = "on";
  const peg$c23 = "where";
  const peg$c24 = "group";
  const peg$c25 = "by";
  const peg$c26 = "order";
  const peg$c27 = "output";
  const peg$c28 = "asc";
  const peg$c29 = "desc";
  const peg$c30 = "or";
  const peg$c31 = "and";
  const peg$c32 = "=";
  const peg$c33 = "<>";
  const peg$c34 = "is";
  const peg$c35 = "not";
  const peg$c36 = "null";
  const peg$c37 = "offset";
  const peg$c38 = "rows";
  const peg$c39 = "fetch";
  const peg$c40 = "next";
  const peg$c41 = "only";
  const peg$c42 = "@";
  const peg$c43 = "'";

  const peg$r0 = /^[A-Za-z_]/;
  const peg$r1 = /^[0-9]/;
  const peg$r2 = /^[^']/;
  const peg$r3 = /^[A-Za-z0-9_]/;
  const peg$r4 = /^[ \t\n]/;

  const peg$e0 = peg$literalExpectation("select", true);
  const peg$e1 = peg$literalExpectation("from", true);
  const peg$e2 = peg$literalExpectation(";", false);
  const peg$e3 = peg$literalExpectation("insert", true);
  const peg$e4 = peg$literalExpectation("into", true);
  const peg$e5 = peg$literalExpectation("(", false);
  const peg$e6 = peg$literalExpectation(")", false);
  const peg$e7 = peg$literalExpectation(",", false);
  const peg$e8 = peg$literalExpectation("values", true);
  const peg$e9 = peg$literalExpectation("NEWID()", false);
  const peg$e10 = peg$literalExpectation("as", true);
  const peg$e11 = peg$otherExpectation("column");
  const peg$e12 = peg$literalExpectation(".", false);
  const peg$e13 = peg$literalExpectation("*", false);
  const peg$e14 = peg$literalExpectation("[", false);
  const peg$e15 = peg$literalExpectation("].[", false);
  const peg$e16 = peg$literalExpectation("]", false);
  const peg$e17 = peg$literalExpectation("COUNT(", false);
  const peg$e18 = peg$literalExpectation("inner", true);
  const peg$e19 = peg$literalExpectation("left", true);
  const peg$e20 = peg$literalExpectation("outer", true);
  const peg$e21 = peg$literalExpectation("right", true);
  const peg$e22 = peg$literalExpectation("join", true);
  const peg$e23 = peg$literalExpectation("on", true);
  const peg$e24 = peg$literalExpectation("where", true);
  const peg$e25 = peg$literalExpectation("group", true);
  const peg$e26 = peg$literalExpectation("by", true);
  const peg$e27 = peg$literalExpectation("order", true);
  const peg$e28 = peg$literalExpectation("output", true);
  const peg$e29 = peg$literalExpectation("asc", true);
  const peg$e30 = peg$literalExpectation("desc", true);
  const peg$e31 = peg$literalExpectation("or", true);
  const peg$e32 = peg$literalExpectation("and", true);
  const peg$e33 = peg$literalExpectation("=", false);
  const peg$e34 = peg$literalExpectation("<>", false);
  const peg$e35 = peg$literalExpectation("is", true);
  const peg$e36 = peg$literalExpectation("not", true);
  const peg$e37 = peg$literalExpectation("null", true);
  const peg$e38 = peg$literalExpectation("offset", true);
  const peg$e39 = peg$literalExpectation("rows", true);
  const peg$e40 = peg$literalExpectation("fetch", true);
  const peg$e41 = peg$literalExpectation("next", true);
  const peg$e42 = peg$literalExpectation("only", true);
  const peg$e43 = peg$literalExpectation("@", false);
  const peg$e44 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false, false);
  const peg$e45 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e46 = peg$literalExpectation("'", false);
  const peg$e47 = peg$classExpectation(["'"], true, false, false);
  const peg$e48 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false, false);
  const peg$e49 = peg$otherExpectation("whitespace");
  const peg$e50 = peg$classExpectation([" ", "\t", "\n"], false, false, false);

  function peg$f0(st) {    return st  }
  function peg$f1(select, from, joins, where, groupBy, orderBy, offset, limit) {    return { kind: "select", select, from, joins, where, groupBy, orderBy, offset, limit }  }
  function peg$f2(target, columns, output, values) {    return { kind: "insert", target, columns: columns.map(c => ({ kind: "column", alias: null, column: c })), output, values }  }
  function peg$f3(column) {    return column  }
  function peg$f4(value) {    return value  }
  function peg$f5(values) {    return { kind: "values", values }  }
  function peg$f6() {    return { kind: "function", name: "newid", args: [] }  }
  function peg$f7(source, alias) {    return { kind: "select-source", source, alias }  }
  function peg$f8(source) {    return { kind: "select-source", source, alias: null }  }
  function peg$f9(alias, column) {    return { kind: "column", alias, name: column }  }
  function peg$f10(column) {    return { kind: "column", alias: null, name: column }  }
  function peg$f11() {    return { kind: "literal", type: "wildcard" }  }
  function peg$f12(table, alias) {    return { kind: "table", db: table.db, table: table.table, alias }  }
  function peg$f13(table) {    return table  }
  function peg$f14(table) {    return { kind: "table", db: table.db, table: table.table, alias: null }  }
  function peg$f15(db, table) {    return { db, table }  }
  function peg$f16(column) {    return { kind: "function", name: "count", args: [column] }  }
  function peg$f17(column) {    return column  }
  function peg$f18() {    return "inner"  }
  function peg$f19() {    return "left outer"  }
  function peg$f20() {    return "right outer"  }
  function peg$f21(type, source, c) {    return c  }
  function peg$f22(type, source, condition) {    return { 
       kind: "join", 
       type: type ?? "inner", 
       source,
       condition
     }  }
  function peg$f23(c) {    return c  }
  function peg$f24(c) {    return c  }
  function peg$f25(c) {    return c  }
  function peg$f26(c) {    return c  }
  function peg$f27() {    return "asc"  }
  function peg$f28() {    return "desc"  }
  function peg$f29(c, d) {    return d  }
  function peg$f30(c, direction) {    return { kind: "order", column: c, direction: direction ?? "asc" }  }
  function peg$f31(head, tail) {
    return tail.reduce((acc, [, , , next]) => ({
      kind: "condition",
      type: "or",
      left: acc,
      right: next
    }), head);
  }
  function peg$f32(head, tail) {
    return tail.reduce((acc, [, , , next]) => ({
      kind: "condition",
      type: "and",
      left: acc,
      right: next
    }), head);
  }
  function peg$f33(c) {    return c  }
  function peg$f34(left, right) {    return { kind: "condition", left, right, type: "equality" }  }
  function peg$f35(left, right) {    return { kind: "condition", left, right, type: "inequality" }  }
  function peg$f36(left, not) {    return { kind: "condition", left, right: { kind: "literal", type: "null" }, type: not ? "inequality" : "equality" }  }
  function peg$f37(input) {    return { kind: "offset", rows: input }  }
  function peg$f38(input) {    return { kind: "limit", rows: input }  }
  function peg$f39(input) {    return { kind: "input", identifier: input }  }
  function peg$f40() {    return { kind: "literal", type: "null" }  }
  function peg$f41(n) {    return { kind: "literal", type: "number", value: parseInt(n) }  }
  function peg$f42(value) {    return { kind: "literal", type: "string", value }  }
  function peg$f43() {    return { kind: "identifier", name: text() }  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsesql() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseselect();
    if (s2 === peg$FAILED) {
      s2 = peg$parseinsert();
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseWS();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselect() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselection();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = input.substr(peg$currPos, 4);
            if (s5.toLowerCase() === peg$c1) {
              peg$currPos += (4);
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetable_source();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsejoins();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  s9 = peg$parsewhere();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  s10 = peg$parsegroup();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  s11 = peg$parseorder();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  s12 = peg$parseoffset();
                  if (s12 === peg$FAILED) {
                    s12 = null;
                  }
                  s13 = peg$parselimit();
                  if (s13 === peg$FAILED) {
                    s13 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s14 = peg$c2;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e2); }
                  }
                  if (s14 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f1(s3, s7, s8, s9, s10, s11, s12, s13);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsert() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c3) {
      peg$currPos += (6);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = input.substr(peg$currPos, 4);
        if (s3.toLowerCase() === peg$c4) {
          peg$currPos += (4);
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetable_source();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWS();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s7 = peg$c5;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseinsert_columns();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseWS();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s10 = peg$c6;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e6); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseoutput();
                      if (s11 === peg$FAILED) {
                        s11 = null;
                      }
                      s12 = peg$parsevalues();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s13 = peg$c2;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e2); }
                        }
                        if (s13 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f2(s5, s8, s11, s12);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsert_columns() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseWS();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseidentifier();
    if (s4 !== peg$FAILED) {
      peg$savedPos = s2;
      s2 = peg$f3(s4);
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseidentifier();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f3(s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (s1.length < 1) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevalues() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c8) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c5;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseinsert_value();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s7;
            s7 = peg$f4(s9);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c7;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parseWS();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s9 = [s9, s10];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parseWS();
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$parseinsert_value();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s8;
                s8 = peg$f4(s10);
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                peg$currPos = s7;
                s7 = peg$FAILED;
              } else {
                s7 = s8;
              }
            } else {
              s7 = s8;
            }
          }
          if (s6.length < 1) {
            peg$currPos = s5;
            s5 = peg$FAILED;
          } else {
            s5 = s6;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWS();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (input.charCodeAt(peg$currPos) === 41) {
              s7 = peg$c6;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsert_value() {
    let s0, s1;

    s0 = peg$parseinput();
    if (s0 === peg$FAILED) {
      s0 = peg$parseliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f6();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseselection() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseselect_statement();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c7;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parseselect_statement();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (s1.length < 1) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseselect_statement() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseselect_source();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = input.substr(peg$currPos, 2);
        if (s3.toLowerCase() === peg$c10) {
          peg$currPos += (2);
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f7(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseselect_source();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecolumn_name() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f10(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f11();
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parsetable_source_alias() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsetable_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetable_source() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsetable_source_alias();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetable_name();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetable_name() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c14) {
          s3 = peg$c14;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f15(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselect_source() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolumn_name();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecolumn_name();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f17(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsejoins() {
    let s0, s1;

    s0 = [];
    s1 = peg$parsejoin();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsejoin();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsejoinType() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c17) {
      peg$currPos += (5);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c18) {
        peg$currPos += (4);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = input.substr(peg$currPos, 5);
          if (s4.toLowerCase() === peg$c19) {
            peg$currPos += (5);
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f19();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 5);
        if (s1.toLowerCase() === peg$c20) {
          peg$currPos += (5);
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseWS();
          if (s3 !== peg$FAILED) {
            s4 = input.substr(peg$currPos, 5);
            if (s4.toLowerCase() === peg$c19) {
              peg$currPos += (5);
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          s3 = peg$parseWS();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsejoin() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsejoinType();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = input.substr(peg$currPos, 4);
      if (s3.toLowerCase() === peg$c21) {
        peg$currPos += (4);
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetable_source_alias();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseWS();
            if (s7 !== peg$FAILED) {
              s8 = input.substr(peg$currPos, 2);
              if (s8.toLowerCase() === peg$c22) {
                peg$currPos += (2);
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseWS();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsecondition();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s6 = peg$f21(s2, s5, s10);
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f22(s2, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhere() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c23) {
        peg$currPos += (5);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseor_condition();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f23(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegroup() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c24) {
        peg$currPos += (5);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = input.substr(peg$currPos, 2);
          if (s4.toLowerCase() === peg$c25) {
            peg$currPos += (2);
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parsecolumn_name();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s10 = peg$c7;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseWS();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s9 = peg$parsecolumn_name();
                  if (s9 === peg$FAILED) {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  } else {
                    s8 = s9;
                  }
                } else {
                  s8 = s9;
                }
              }
              if (s7.length < 1) {
                peg$currPos = s6;
                s6 = peg$FAILED;
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f24(s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorder() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c26) {
        peg$currPos += (5);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = input.substr(peg$currPos, 2);
          if (s4.toLowerCase() === peg$c25) {
            peg$currPos += (2);
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parsecolumn_sorting();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s10 = peg$c7;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseWS();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s9 = peg$parsecolumn_sorting();
                  if (s9 === peg$FAILED) {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  } else {
                    s8 = s9;
                  }
                } else {
                  s8 = s9;
                }
              }
              if (s7.length < 1) {
                peg$currPos = s6;
                s6 = peg$FAILED;
              } else {
                s6 = s7;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f25(s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoutput() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c27) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsecolumn_name();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c7;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseWS();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s7 = peg$parsecolumn_name();
              if (s7 === peg$FAILED) {
                peg$currPos = s6;
                s6 = peg$FAILED;
              } else {
                s6 = s7;
              }
            } else {
              s6 = s7;
            }
          }
          if (s5.length < 1) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderDirection() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c28) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c29) {
        peg$currPos += (4);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f28();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecolumn_sorting() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecolumn_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseWS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseorderDirection();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f29(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f30(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseor_condition() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseand_condition();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseWS();
      if (s4 !== peg$FAILED) {
        s5 = input.substr(peg$currPos, 2);
        if (s5.toLowerCase() === peg$c30) {
          peg$currPos += (2);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseand_condition();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseWS();
        if (s4 !== peg$FAILED) {
          s5 = input.substr(peg$currPos, 2);
          if (s5.toLowerCase() === peg$c30) {
            peg$currPos += (2);
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseand_condition();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f31(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseand_condition() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsegrouped_condition();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseWS();
      if (s4 !== peg$FAILED) {
        s5 = input.substr(peg$currPos, 3);
        if (s5.toLowerCase() === peg$c31) {
          peg$currPos += (3);
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsegrouped_condition();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseWS();
        if (s4 !== peg$FAILED) {
          s5 = input.substr(peg$currPos, 3);
          if (s5.toLowerCase() === peg$c31) {
            peg$currPos += (3);
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsegrouped_condition();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegrouped_condition() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c5;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseor_condition();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c6;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecondition();
    }

    return s0;
  }

  function peg$parsecondition() {
    let s0;

    s0 = peg$parseequality_condition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenull_condition();
    }

    return s0;
  }

  function peg$parseequality_condition() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecolumn_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c32;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseliteral();
            if (s5 === peg$FAILED) {
              s5 = peg$parseinput();
              if (s5 === peg$FAILED) {
                s5 = peg$parsecolumn_name();
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f34(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecolumn_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseliteral();
              if (s5 === peg$FAILED) {
                s5 = peg$parseinput();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsecolumn_name();
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f35(s1, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenull_condition() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecolumn_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = input.substr(peg$currPos, 2);
        if (s3.toLowerCase() === peg$c34) {
          peg$currPos += (2);
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = input.substr(peg$currPos, 3);
            if (s6.toLowerCase() === peg$c35) {
              peg$currPos += (3);
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseWS();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = input.substr(peg$currPos, 4);
            if (s6.toLowerCase() === peg$c36) {
              peg$currPos += (4);
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f36(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoffset() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 6);
      if (s2.toLowerCase() === peg$c37) {
        peg$currPos += (6);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseinput();
          if (s4 === peg$FAILED) {
            s4 = peg$parsenumber();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS();
            if (s5 !== peg$FAILED) {
              s6 = input.substr(peg$currPos, 4);
              if (s6.toLowerCase() === peg$c38) {
                peg$currPos += (4);
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f37(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselimit() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseWS();
    if (s1 !== peg$FAILED) {
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c39) {
        peg$currPos += (5);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 !== peg$FAILED) {
          s4 = input.substr(peg$currPos, 4);
          if (s4.toLowerCase() === peg$c40) {
            peg$currPos += (4);
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseinput();
              if (s6 === peg$FAILED) {
                s6 = peg$parsenumber();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseWS();
                if (s7 !== peg$FAILED) {
                  s8 = input.substr(peg$currPos, 4);
                  if (s8.toLowerCase() === peg$c38) {
                    peg$currPos += (4);
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseWS();
                    if (s9 !== peg$FAILED) {
                      s10 = input.substr(peg$currPos, 4);
                      if (s10.toLowerCase() === peg$c41) {
                        peg$currPos += (4);
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e42); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f38(s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinput() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r0.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseliteral() {
    let s0;

    s0 = peg$parsenull();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring();
      }
    }

    return s0;
  }

  function peg$parsenull() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += (4);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenumber() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r1.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r2.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r2.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f42(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifier() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekeyword();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r3.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r3.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f43();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyword() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c23) {
      peg$currPos += (5);
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 4);
      if (s0.toLowerCase() === peg$c1) {
        peg$currPos += (4);
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 4);
        if (s0.toLowerCase() === peg$c21) {
          peg$currPos += (4);
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 5);
          if (s0.toLowerCase() === peg$c24) {
            peg$currPos += (5);
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 6);
            if (s0.toLowerCase() === peg$c37) {
              peg$currPos += (6);
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e38); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 5);
              if (s0.toLowerCase() === peg$c39) {
                peg$currPos += (5);
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e40); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 4);
                if (s0.toLowerCase() === peg$c40) {
                  peg$currPos += (4);
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e41); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 5);
                  if (s0.toLowerCase() === peg$c26) {
                    peg$currPos += (5);
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = input.substr(peg$currPos, 6);
                    if (s0.toLowerCase() === peg$c27) {
                      peg$currPos += (6);
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e28); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWS() {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r4.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

module.exports = {
  StartRules: ["sql"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse,
};
