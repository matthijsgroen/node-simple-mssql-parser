{"version":3,"sources":["../src/mssql-parser.js","../src/index.ts"],"sourcesContent":["// @generated by Peggy 5.0.4.\n//\n// https://peggyjs.org/\n\n\"use strict\";\n\nclass peg$SyntaxError extends SyntaxError {\n  constructor(message, expected, found, location) {\n    super(message);\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n  }\n\n  format(sources) {\n    let str = \"Error: \" + this.message;\n    if (this.location) {\n      let src = null;\n      const st = sources.find(s => s.source === this.location.source);\n      if (st) {\n        src = st.text.split(/\\r\\n|\\n|\\r/g);\n      }\n      const s = this.location.start;\n      const offset_s = (this.location.source && (typeof this.location.source.offset === \"function\"))\n        ? this.location.source.offset(s)\n        : s;\n      const loc = this.location.source + \":\" + offset_s.line + \":\" + offset_s.column;\n      if (src) {\n        const e = this.location.end;\n        const filler = \"\".padEnd(offset_s.line.toString().length, \" \");\n        const line = src[s.line - 1];\n        const last = s.line === e.line ? e.column : line.length + 1;\n        const hatLen = (last - s.column) || 1;\n        str += \"\\n --> \" + loc + \"\\n\"\n            + filler + \" |\\n\"\n            + offset_s.line + \" | \" + line + \"\\n\"\n            + filler + \" | \" + \"\".padEnd(s.column - 1, \" \")\n            + \"\".padEnd(hatLen, \"^\");\n      } else {\n        str += \"\\n at \" + loc;\n      }\n    }\n    return str;\n  }\n\n  static buildMessage(expected, found) {\n    function hex(ch) {\n      return ch.codePointAt(0).toString(16).toUpperCase();\n    }\n\n    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, \"unicode\")\n      ? new RegExp(\"[\\\\p{C}\\\\p{Mn}\\\\p{Mc}]\", \"gu\")\n      : null;\n    function unicodeEscape(s) {\n      if (nonPrintable) {\n        return s.replace(nonPrintable,  ch => \"\\\\u{\" + hex(ch) + \"}\");\n      }\n      return s;\n    }\n\n    function literalEscape(s) {\n      return unicodeEscape(s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          ch => \"\\\\x0\" + hex(ch))\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, ch => \"\\\\x\"  + hex(ch)));\n    }\n\n    function classEscape(s) {\n      return unicodeEscape(s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,          ch => \"\\\\x0\" + hex(ch))\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, ch => \"\\\\x\"  + hex(ch)));\n    }\n\n    const DESCRIBE_EXPECTATION_FNS = {\n      literal(expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      class(expectation) {\n        const escapedParts = expectation.parts.map(\n          part => (Array.isArray(part)\n            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n            : classEscape(part))\n        );\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts.join(\"\") + \"]\" + (expectation.unicode ? \"u\" : \"\");\n      },\n\n      any() {\n        return \"any character\";\n      },\n\n      end() {\n        return \"end of input\";\n      },\n\n      other(expectation) {\n        return expectation.description;\n      },\n    };\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      const descriptions = expected.map(describeExpectation);\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        let j = 1;\n        for (let i = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  }\n}\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n\n  const peg$FAILED = {};\n  const peg$source = options.grammarSource;\n\n  const peg$startRuleFunctions = {\n    sql: peg$parsesql,\n  };\n  let peg$startRuleFunction = peg$parsesql;\n\n  const peg$c0 = \"select\";\n  const peg$c1 = \"from\";\n  const peg$c2 = \";\";\n  const peg$c3 = \",\";\n  const peg$c4 = \"as\";\n  const peg$c5 = \".\";\n  const peg$c6 = \"*\";\n  const peg$c7 = \"[\";\n  const peg$c8 = \"].[\";\n  const peg$c9 = \"]\";\n  const peg$c10 = \"COUNT(\";\n  const peg$c11 = \")\";\n  const peg$c12 = \"inner\";\n  const peg$c13 = \"left\";\n  const peg$c14 = \"outer\";\n  const peg$c15 = \"right\";\n  const peg$c16 = \"join\";\n  const peg$c17 = \"on\";\n  const peg$c18 = \"where\";\n  const peg$c19 = \"group\";\n  const peg$c20 = \"by\";\n  const peg$c21 = \"order\";\n  const peg$c22 = \"asc\";\n  const peg$c23 = \"desc\";\n  const peg$c24 = \"(\";\n  const peg$c25 = \"and\";\n  const peg$c26 = \"or\";\n  const peg$c27 = \"=\";\n  const peg$c28 = \"offset\";\n  const peg$c29 = \"rows\";\n  const peg$c30 = \"fetch\";\n  const peg$c31 = \"next\";\n  const peg$c32 = \"only\";\n  const peg$c33 = \"@\";\n  const peg$c34 = \"null\";\n  const peg$c35 = \"'\";\n\n  const peg$r0 = /^[A-Za-z_]/;\n  const peg$r1 = /^[0-9]/;\n  const peg$r2 = /^[^']/;\n  const peg$r3 = /^[A-Za-z0-9_]/;\n  const peg$r4 = /^[ \\t\\n]/;\n\n  const peg$e0 = peg$literalExpectation(\"select\", true);\n  const peg$e1 = peg$literalExpectation(\"from\", true);\n  const peg$e2 = peg$literalExpectation(\";\", false);\n  const peg$e3 = peg$literalExpectation(\",\", false);\n  const peg$e4 = peg$literalExpectation(\"as\", true);\n  const peg$e5 = peg$literalExpectation(\".\", false);\n  const peg$e6 = peg$literalExpectation(\"*\", false);\n  const peg$e7 = peg$literalExpectation(\"[\", false);\n  const peg$e8 = peg$literalExpectation(\"].[\", false);\n  const peg$e9 = peg$literalExpectation(\"]\", false);\n  const peg$e10 = peg$literalExpectation(\"COUNT(\", false);\n  const peg$e11 = peg$literalExpectation(\")\", false);\n  const peg$e12 = peg$literalExpectation(\"inner\", true);\n  const peg$e13 = peg$literalExpectation(\"left\", true);\n  const peg$e14 = peg$literalExpectation(\"outer\", true);\n  const peg$e15 = peg$literalExpectation(\"right\", true);\n  const peg$e16 = peg$literalExpectation(\"join\", true);\n  const peg$e17 = peg$literalExpectation(\"on\", true);\n  const peg$e18 = peg$literalExpectation(\"where\", true);\n  const peg$e19 = peg$literalExpectation(\"group\", true);\n  const peg$e20 = peg$literalExpectation(\"by\", true);\n  const peg$e21 = peg$literalExpectation(\"order\", true);\n  const peg$e22 = peg$literalExpectation(\"asc\", true);\n  const peg$e23 = peg$literalExpectation(\"desc\", true);\n  const peg$e24 = peg$literalExpectation(\"(\", false);\n  const peg$e25 = peg$literalExpectation(\"and\", true);\n  const peg$e26 = peg$literalExpectation(\"or\", true);\n  const peg$e27 = peg$literalExpectation(\"=\", false);\n  const peg$e28 = peg$literalExpectation(\"offset\", true);\n  const peg$e29 = peg$literalExpectation(\"rows\", true);\n  const peg$e30 = peg$literalExpectation(\"fetch\", true);\n  const peg$e31 = peg$literalExpectation(\"next\", true);\n  const peg$e32 = peg$literalExpectation(\"only\", true);\n  const peg$e33 = peg$literalExpectation(\"@\", false);\n  const peg$e34 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false, false);\n  const peg$e35 = peg$literalExpectation(\"null\", true);\n  const peg$e36 = peg$classExpectation([[\"0\", \"9\"]], false, false, false);\n  const peg$e37 = peg$literalExpectation(\"'\", false);\n  const peg$e38 = peg$classExpectation([\"'\"], true, false, false);\n  const peg$e39 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false, false);\n  const peg$e40 = peg$otherExpectation(\"whitespace\");\n  const peg$e41 = peg$classExpectation([\" \", \"\\t\", \"\\n\"], false, false, false);\n\n  function peg$f0(st) {    return st  }\n  function peg$f1(select, from, joins, where, groupBy, orderBy, offset, limit) {    return { kind: \"select\", select, from, joins, where, groupBy, orderBy, offset, limit }  }\n  function peg$f2(source, alias) {    return { kind: \"select-source\", source, alias }  }\n  function peg$f3(source) {    return { kind: \"select-source\", source, alias: null }  }\n  function peg$f4(alias, column) {    return { kind: \"column\", alias, column }  }\n  function peg$f5(column) {    return { kind: \"column\", alias: null, column }  }\n  function peg$f6() {    return { kind: \"literal\", type: \"wildcard\" }  }\n  function peg$f7(table, alias) {    return { kind: \"table\", db: table.db, table: table.table, alias }  }\n  function peg$f8(table) {    return table  }\n  function peg$f9(table) {    return { kind: \"table\", db: table.db, table: table.table, alias: null }  }\n  function peg$f10(db, table) {    return { db, table }  }\n  function peg$f11(column) {    return { kind: \"function\", name: \"count\", args: [column] }  }\n  function peg$f12(column) {    return column  }\n  function peg$f13() {    return \"inner\"  }\n  function peg$f14() {    return \"left outer\"  }\n  function peg$f15() {    return \"right outer\"  }\n  function peg$f16(type, source, c) {    return c  }\n  function peg$f17(type, source, condition) {    return { \n       kind: \"join\", \n       type: type ?? \"inner\", \n       source,\n       condition\n     }  }\n  function peg$f18(c) {    return { kind: \"where\", condition:c }  }\n  function peg$f19(c) {    return c  }\n  function peg$f20(c) {    return c  }\n  function peg$f21() {    return \"asc\"  }\n  function peg$f22() {    return \"desc\"  }\n  function peg$f23(c, d) {    return d  }\n  function peg$f24(c, direction) {    return { kind: \"order\", column: c, direction: direction ?? \"asc\" }  }\n  function peg$f25(c) {    return c  }\n  function peg$f26(left, right) {    return { kind: \"condition\", type: \"and\", left, right }  }\n  function peg$f27(left, right) {    return { kind: \"condition\", type: \"or\", left, right }  }\n  function peg$f28(left, right) {    return { kind: \"condition\", left, right, type: \"equality\" }  }\n  function peg$f29(input) {    return { kind: \"offset\", rows: input }  }\n  function peg$f30(input) {    return { kind: \"limit\", rows: input }  }\n  function peg$f31(input) {    return { kind: \"input\", identifier: input }  }\n  function peg$f32() {    return { kind: \"literal\", type: \"null\" }  }\n  function peg$f33(n) {    return { kind: \"literal\", type: \"number\", value: parseInt(n) }  }\n  function peg$f34(value) {    return { kind: \"literal\", type: \"string\", value }  }\n  function peg$f35() {    return { kind: \"identifier\", name: text() }  }\n  let peg$currPos = options.peg$currPos | 0;\n  let peg$savedPos = peg$currPos;\n  const peg$posDetailsCache = [{ line: 1, column: 1 }];\n  let peg$maxFailPos = peg$currPos;\n  let peg$maxFailExpected = options.peg$maxFailExpected || [];\n  let peg$silentFails = options.peg$silentFails | 0;\n\n  let peg$result;\n\n  if (options.startRule) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function offset() {\n    return peg$savedPos;\n  }\n\n  function range() {\n    return {\n      source: peg$source,\n      start: peg$savedPos,\n      end: peg$currPos,\n    };\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== undefined\n      ? location\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$getUnicode(pos = peg$currPos) {\n    const cp = input.codePointAt(pos);\n    if (cp === undefined) {\n      return \"\";\n    }\n    return String.fromCodePoint(cp);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text, ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {\n    return { type: \"class\", parts, inverted, ignoreCase, unicode };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description };\n  }\n\n  function peg$computePosDetails(pos) {\n    let details = peg$posDetailsCache[pos];\n    let p;\n\n    if (details) {\n      return details;\n    } else {\n      if (pos >= peg$posDetailsCache.length) {\n        p = peg$posDetailsCache.length - 1;\n      } else {\n        p = pos;\n        while (!peg$posDetailsCache[--p]) {}\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column,\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos, offset) {\n    const startPosDetails = peg$computePosDetails(startPos);\n    const endPosDetails = peg$computePosDetails(endPos);\n\n    const res = {\n      source: peg$source,\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column,\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column,\n      },\n    };\n    if (offset && peg$source && (typeof peg$source.offset === \"function\")) {\n      res.start = peg$source.offset(res.start);\n      res.end = peg$source.offset(res.end);\n    }\n    return res;\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsesql() {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    s2 = peg$parseselect();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseWS();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f0(s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect() {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = input.substr(peg$currPos, 6);\n    if (s1.toLowerCase() === peg$c0) {\n      peg$currPos += (6);\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e0); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseselection();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWS();\n          if (s4 !== peg$FAILED) {\n            s5 = input.substr(peg$currPos, 4);\n            if (s5.toLowerCase() === peg$c1) {\n              peg$currPos += (4);\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e1); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseWS();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_source();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsejoins();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  s9 = peg$parsewhere();\n                  if (s9 === peg$FAILED) {\n                    s9 = null;\n                  }\n                  s10 = peg$parsegroup();\n                  if (s10 === peg$FAILED) {\n                    s10 = null;\n                  }\n                  s11 = peg$parseorder();\n                  if (s11 === peg$FAILED) {\n                    s11 = null;\n                  }\n                  s12 = peg$parseoffset();\n                  if (s12 === peg$FAILED) {\n                    s12 = null;\n                  }\n                  s13 = peg$parselimit();\n                  if (s13 === peg$FAILED) {\n                    s13 = null;\n                  }\n                  if (input.charCodeAt(peg$currPos) === 59) {\n                    s14 = peg$c2;\n                    peg$currPos++;\n                  } else {\n                    s14 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e2); }\n                  }\n                  if (s14 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f1(s3, s7, s8, s9, s10, s11, s12, s13);\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselection() {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseselect_statement();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 44) {\n        s4 = peg$c3;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e3); }\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWS();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s3 = peg$parseselect_statement();\n        if (s3 === peg$FAILED) {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        } else {\n          s2 = s3;\n        }\n      } else {\n        s2 = s3;\n      }\n    }\n    if (s1.length < 1) {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_statement() {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_source();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = input.substr(peg$currPos, 2);\n        if (s3.toLowerCase() === peg$c4) {\n          peg$currPos += (2);\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e4); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWS();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseidentifier();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f2(s1, s5);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseselect_source();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f3(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseidentifier();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c5;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e5); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseidentifier();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f4(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseidentifier();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f5(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s1 = peg$c6;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e6); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f6();\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_source_alias() {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseidentifier();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f7(s1, s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_source() {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_source_alias();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f8(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f9(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c7;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e7); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseidentifier();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c8) {\n          s3 = peg$c8;\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e8); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseidentifier();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c9;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e9); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f10(s2, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_source() {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c10) {\n      s1 = peg$c10;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecolumn_name();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c11;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f11(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f12(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoins() {\n    let s0, s1;\n\n    s0 = [];\n    s1 = peg$parsejoin();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsejoin();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoinType() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = input.substr(peg$currPos, 5);\n    if (s1.toLowerCase() === peg$c12) {\n      peg$currPos += (5);\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e12); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f13();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = input.substr(peg$currPos, 4);\n      if (s1.toLowerCase() === peg$c13) {\n        peg$currPos += (4);\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e13); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = input.substr(peg$currPos, 5);\n          if (s4.toLowerCase() === peg$c14) {\n            peg$currPos += (5);\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e14); }\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f14();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = input.substr(peg$currPos, 5);\n        if (s1.toLowerCase() === peg$c15) {\n          peg$currPos += (5);\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e15); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseWS();\n          if (s3 !== peg$FAILED) {\n            s4 = input.substr(peg$currPos, 5);\n            if (s4.toLowerCase() === peg$c14) {\n              peg$currPos += (5);\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e14); }\n            }\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          s3 = peg$parseWS();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15();\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin() {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsejoinType();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = input.substr(peg$currPos, 4);\n      if (s3.toLowerCase() === peg$c16) {\n        peg$currPos += (4);\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e16); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWS();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsetable_source_alias();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseWS();\n            if (s7 !== peg$FAILED) {\n              s8 = input.substr(peg$currPos, 2);\n              if (s8.toLowerCase() === peg$c17) {\n                peg$currPos += (2);\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e17); }\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseWS();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parseequality_condition();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s6 = peg$f16(s2, s5, s10);\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            peg$savedPos = s0;\n            s0 = peg$f17(s2, s5, s6);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = input.substr(peg$currPos, 5);\n      if (s2.toLowerCase() === peg$c18) {\n        peg$currPos += (5);\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e18); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseconditions();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f18(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup() {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = input.substr(peg$currPos, 5);\n      if (s2.toLowerCase() === peg$c19) {\n        peg$currPos += (5);\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e19); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = input.substr(peg$currPos, 2);\n          if (s4.toLowerCase() === peg$c20) {\n            peg$currPos += (2);\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e20); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = [];\n              s8 = peg$parsecolumn_name();\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                s9 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s10 = peg$c3;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseWS();\n                  if (s11 !== peg$FAILED) {\n                    s10 = [s10, s11];\n                    s9 = s10;\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 !== peg$FAILED) {\n                  s9 = peg$parsecolumn_name();\n                  if (s9 === peg$FAILED) {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  } else {\n                    s8 = s9;\n                  }\n                } else {\n                  s8 = s9;\n                }\n              }\n              if (s7.length < 1) {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              } else {\n                s6 = s7;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f19(s6);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder() {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = input.substr(peg$currPos, 5);\n      if (s2.toLowerCase() === peg$c21) {\n        peg$currPos += (5);\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e21); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = input.substr(peg$currPos, 2);\n          if (s4.toLowerCase() === peg$c20) {\n            peg$currPos += (2);\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e20); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = [];\n              s8 = peg$parsecolumn_sorting();\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                s9 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s10 = peg$c3;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e3); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseWS();\n                  if (s11 !== peg$FAILED) {\n                    s10 = [s10, s11];\n                    s9 = s10;\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 !== peg$FAILED) {\n                  s9 = peg$parsecolumn_sorting();\n                  if (s9 === peg$FAILED) {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  } else {\n                    s8 = s9;\n                  }\n                } else {\n                  s8 = s9;\n                }\n              }\n              if (s7.length < 1) {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              } else {\n                s6 = s7;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f20(s6);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorderDirection() {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = input.substr(peg$currPos, 3);\n    if (s1.toLowerCase() === peg$c22) {\n      peg$currPos += (3);\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e22); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f21();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = input.substr(peg$currPos, 4);\n      if (s1.toLowerCase() === peg$c23) {\n        peg$currPos += (4);\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e23); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$f22();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_sorting() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parseWS();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseorderDirection();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s2 = peg$f23(s1, s4);\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      peg$savedPos = s0;\n      s0 = peg$f24(s1, s2);\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseconditions() {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c24;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e24); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      s3 = peg$parseconditions();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWS();\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s5 = peg$c11;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e11); }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f25(s3);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseequality_condition();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseWS();\n        if (s2 !== peg$FAILED) {\n          s3 = input.substr(peg$currPos, 3);\n          if (s3.toLowerCase() === peg$c25) {\n            peg$currPos += (3);\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e25); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseWS();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseconditions();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f26(s1, s5);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseequality_condition();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseWS();\n          if (s2 !== peg$FAILED) {\n            s3 = input.substr(peg$currPos, 2);\n            if (s3.toLowerCase() === peg$c26) {\n              peg$currPos += (2);\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e26); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseWS();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseconditions();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s0 = peg$f27(s1, s5);\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseequality_condition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseequality_condition() {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c27;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e27); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWS();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseinput();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parsecolumn_name();\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f28(s1, s5);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoffset() {\n    let s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = input.substr(peg$currPos, 6);\n      if (s2.toLowerCase() === peg$c28) {\n        peg$currPos += (6);\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseinput();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parsenumber();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWS();\n            if (s5 !== peg$FAILED) {\n              s6 = input.substr(peg$currPos, 4);\n              if (s6.toLowerCase() === peg$c29) {\n                peg$currPos += (4);\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e29); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f29(s4);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit() {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseWS();\n    if (s1 !== peg$FAILED) {\n      s2 = input.substr(peg$currPos, 5);\n      if (s2.toLowerCase() === peg$c30) {\n        peg$currPos += (5);\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e30); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          s4 = input.substr(peg$currPos, 4);\n          if (s4.toLowerCase() === peg$c31) {\n            peg$currPos += (4);\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e31); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseinput();\n              if (s6 === peg$FAILED) {\n                s6 = peg$parsenumber();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseWS();\n                if (s7 !== peg$FAILED) {\n                  s8 = input.substr(peg$currPos, 4);\n                  if (s8.toLowerCase() === peg$c29) {\n                    peg$currPos += (4);\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e29); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseWS();\n                    if (s9 !== peg$FAILED) {\n                      s10 = input.substr(peg$currPos, 4);\n                      if (s10.toLowerCase() === peg$c32) {\n                        peg$currPos += (4);\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$e32); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f30(s6);\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinput() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s1 = peg$c33;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e33); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r0.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e34); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = input.charAt(peg$currPos);\n          if (peg$r0.test(s4)) {\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e34); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s0 = peg$f31(s2);\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    let s0;\n\n    s0 = peg$parsenull();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsestring();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenull() {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = input.substr(peg$currPos, 4);\n    if (s1.toLowerCase() === peg$c34) {\n      peg$currPos += (4);\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e35); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f32();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = input.charAt(peg$currPos);\n    if (peg$r1.test(s3)) {\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e36); }\n    }\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = input.charAt(peg$currPos);\n        if (peg$r1.test(s3)) {\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e36); }\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$f33(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsestring() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e37); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = input.charAt(peg$currPos);\n      if (peg$r2.test(s4)) {\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e38); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = input.charAt(peg$currPos);\n          if (peg$r2.test(s4)) {\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e38); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c35;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e37); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f34(s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentifier() {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n    s2 = peg$parsekeyword();\n    peg$silentFails--;\n    if (s2 === peg$FAILED) {\n      s1 = undefined;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = input.charAt(peg$currPos);\n      if (peg$r0.test(s2)) {\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e34); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = input.charAt(peg$currPos);\n        if (peg$r3.test(s4)) {\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e39); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = input.charAt(peg$currPos);\n          if (peg$r3.test(s4)) {\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e39); }\n          }\n        }\n        peg$savedPos = s0;\n        s0 = peg$f35();\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword() {\n    let s0;\n\n    s0 = input.substr(peg$currPos, 5);\n    if (s0.toLowerCase() === peg$c18) {\n      peg$currPos += (5);\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e18); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = input.substr(peg$currPos, 4);\n      if (s0.toLowerCase() === peg$c1) {\n        peg$currPos += (4);\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$e1); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = input.substr(peg$currPos, 4);\n        if (s0.toLowerCase() === peg$c16) {\n          peg$currPos += (4);\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e16); }\n        }\n        if (s0 === peg$FAILED) {\n          s0 = input.substr(peg$currPos, 5);\n          if (s0.toLowerCase() === peg$c19) {\n            peg$currPos += (5);\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$e19); }\n          }\n          if (s0 === peg$FAILED) {\n            s0 = input.substr(peg$currPos, 6);\n            if (s0.toLowerCase() === peg$c28) {\n              peg$currPos += (6);\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$e28); }\n            }\n            if (s0 === peg$FAILED) {\n              s0 = input.substr(peg$currPos, 5);\n              if (s0.toLowerCase() === peg$c30) {\n                peg$currPos += (5);\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$e30); }\n              }\n              if (s0 === peg$FAILED) {\n                s0 = input.substr(peg$currPos, 4);\n                if (s0.toLowerCase() === peg$c31) {\n                  peg$currPos += (4);\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$e31); }\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = input.substr(peg$currPos, 5);\n                  if (s0.toLowerCase() === peg$c21) {\n                    peg$currPos += (5);\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$e21); }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWS() {\n    let s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    s1 = input.charAt(peg$currPos);\n    if (peg$r4.test(s1)) {\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e41); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = input.charAt(peg$currPos);\n        if (peg$r4.test(s1)) {\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$e41); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$e40); }\n    }\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);\n  function peg$throw() {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n  if (options.peg$library) {\n    return /** @type {any} */ ({\n      peg$result,\n      peg$currPos,\n      peg$FAILED,\n      peg$maxFailExpected,\n      peg$maxFailPos,\n      peg$success,\n      peg$throw: peg$success ? undefined : peg$throw,\n    });\n  }\n  if (peg$success) {\n    return peg$result;\n  } else {\n    peg$throw();\n  }\n}\n\nmodule.exports = {\n  StartRules: [\"sql\"],\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse,\n};\n","import { parse } from './mssql-parser';\nimport { StatementNode } from './types';\n\nexport const parseMSSQLStatement = (query: string): StatementNode => {\n  try {\n    return parse(query);\n  } catch (error) {\n    console.error('Parsing error:', error);\n    throw error;\n  }\n}"],"mappings":";AAMA,IAAM,kBAAN,cAA8B,YAAY;AAAA,EACxC,YAAY,SAAS,UAAU,OAAO,UAAU;AAC9C,UAAM,OAAO;AACb,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,OAAO,SAAS;AACd,QAAI,MAAM,YAAY,KAAK;AAC3B,QAAI,KAAK,UAAU;AACjB,UAAI,MAAM;AACV,YAAM,KAAK,QAAQ,KAAK,CAAAA,OAAKA,GAAE,WAAW,KAAK,SAAS,MAAM;AAC9D,UAAI,IAAI;AACN,cAAM,GAAG,KAAK,MAAM,aAAa;AAAA,MACnC;AACA,YAAM,IAAI,KAAK,SAAS;AACxB,YAAM,WAAY,KAAK,SAAS,UAAW,OAAO,KAAK,SAAS,OAAO,WAAW,aAC9E,KAAK,SAAS,OAAO,OAAO,CAAC,IAC7B;AACJ,YAAM,MAAM,KAAK,SAAS,SAAS,MAAM,SAAS,OAAO,MAAM,SAAS;AACxE,UAAI,KAAK;AACP,cAAM,IAAI,KAAK,SAAS;AACxB,cAAM,SAAS,GAAG,OAAO,SAAS,KAAK,SAAS,EAAE,QAAQ,GAAG;AAC7D,cAAM,OAAO,IAAI,EAAE,OAAO,CAAC;AAC3B,cAAM,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,KAAK,SAAS;AAC1D,cAAM,SAAU,OAAO,EAAE,UAAW;AACpC,eAAO,YAAY,MAAM,OACnB,SAAS,SACT,SAAS,OAAO,QAAQ,OAAO,OAC/B,SAAS,QAAQ,GAAG,OAAO,EAAE,SAAS,GAAG,GAAG,IAC5C,GAAG,OAAO,QAAQ,GAAG;AAAA,MAC7B,OAAO;AACL,eAAO,WAAW;AAAA,MACpB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,aAAa,UAAU,OAAO;AACnC,aAAS,IAAI,IAAI;AACf,aAAO,GAAG,YAAY,CAAC,EAAE,SAAS,EAAE,EAAE,YAAY;AAAA,IACpD;AAEA,UAAM,eAAe,OAAO,UAAU,eAAe,KAAK,OAAO,WAAW,SAAS,IACjF,IAAI,OAAO,0BAA0B,IAAI,IACzC;AACJ,aAAS,cAAc,GAAG;AACxB,UAAI,cAAc;AAChB,eAAO,EAAE,QAAQ,cAAe,QAAM,SAAS,IAAI,EAAE,IAAI,GAAG;AAAA,MAC9D;AACA,aAAO;AAAA,IACT;AAEA,aAAS,cAAc,GAAG;AACxB,aAAO,cAAc,EAClB,QAAQ,OAAO,MAAM,EACrB,QAAQ,MAAO,KAAM,EACrB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,gBAAyB,QAAM,SAAS,IAAI,EAAE,CAAC,EACvD,QAAQ,yBAAyB,QAAM,QAAS,IAAI,EAAE,CAAC,CAAC;AAAA,IAC7D;AAEA,aAAS,YAAY,GAAG;AACtB,aAAO,cAAc,EAClB,QAAQ,OAAO,MAAM,EACrB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK,EACpB,QAAQ,gBAAyB,QAAM,SAAS,IAAI,EAAE,CAAC,EACvD,QAAQ,yBAAyB,QAAM,QAAS,IAAI,EAAE,CAAC,CAAC;AAAA,IAC7D;AAEA,UAAM,2BAA2B;AAAA,MAC/B,QAAQ,aAAa;AACnB,eAAO,MAAO,cAAc,YAAY,IAAI,IAAI;AAAA,MAClD;AAAA,MAEA,MAAM,aAAa;AACjB,cAAM,eAAe,YAAY,MAAM;AAAA,UACrC,UAAS,MAAM,QAAQ,IAAI,IACvB,YAAY,KAAK,CAAC,CAAC,IAAI,MAAM,YAAY,KAAK,CAAC,CAAC,IAChD,YAAY,IAAI;AAAA,QACtB;AAEA,eAAO,OAAO,YAAY,WAAW,MAAM,MAAM,aAAa,KAAK,EAAE,IAAI,OAAO,YAAY,UAAU,MAAM;AAAA,MAC9G;AAAA,MAEA,MAAM;AACJ,eAAO;AAAA,MACT;AAAA,MAEA,MAAM;AACJ,eAAO;AAAA,MACT;AAAA,MAEA,MAAM,aAAa;AACjB,eAAO,YAAY;AAAA,MACrB;AAAA,IACF;AAEA,aAAS,oBAAoB,aAAa;AACxC,aAAO,yBAAyB,YAAY,IAAI,EAAE,WAAW;AAAA,IAC/D;AAEA,aAAS,iBAAiBC,WAAU;AAClC,YAAM,eAAeA,UAAS,IAAI,mBAAmB;AACrD,mBAAa,KAAK;AAElB,UAAI,aAAa,SAAS,GAAG;AAC3B,YAAI,IAAI;AACR,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,cAAI,aAAa,IAAI,CAAC,MAAM,aAAa,CAAC,GAAG;AAC3C,yBAAa,CAAC,IAAI,aAAa,CAAC;AAChC;AAAA,UACF;AAAA,QACF;AACA,qBAAa,SAAS;AAAA,MACxB;AAEA,cAAQ,aAAa,QAAQ;AAAA,QAC3B,KAAK;AACH,iBAAO,aAAa,CAAC;AAAA,QAEvB,KAAK;AACH,iBAAO,aAAa,CAAC,IAAI,SAAS,aAAa,CAAC;AAAA,QAElD;AACE,iBAAO,aAAa,MAAM,GAAG,EAAE,EAAE,KAAK,IAAI,IACtC,UACA,aAAa,aAAa,SAAS,CAAC;AAAA,MAC5C;AAAA,IACF;AAEA,aAAS,cAAcC,QAAO;AAC5B,aAAOA,SAAQ,MAAO,cAAcA,MAAK,IAAI,MAAO;AAAA,IACtD;AAEA,WAAO,cAAc,iBAAiB,QAAQ,IAAI,UAAU,cAAc,KAAK,IAAI;AAAA,EACrF;AACF;AAEA,SAAS,UAAU,OAAO,SAAS;AACjC,YAAU,YAAY,SAAY,UAAU,CAAC;AAE7C,QAAM,aAAa,CAAC;AACpB,QAAM,aAAa,QAAQ;AAE3B,QAAM,yBAAyB;AAAA,IAC7B,KAAK;AAAA,EACP;AACA,MAAI,wBAAwB;AAE5B,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,UAAU;AAEhB,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AACf,QAAM,SAAS;AAEf,QAAM,SAAS,uBAAuB,UAAU,IAAI;AACpD,QAAM,SAAS,uBAAuB,QAAQ,IAAI;AAClD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,SAAS,uBAAuB,MAAM,IAAI;AAChD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,SAAS,uBAAuB,OAAO,KAAK;AAClD,QAAM,SAAS,uBAAuB,KAAK,KAAK;AAChD,QAAM,UAAU,uBAAuB,UAAU,KAAK;AACtD,QAAM,UAAU,uBAAuB,KAAK,KAAK;AACjD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,MAAM,IAAI;AACjD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,MAAM,IAAI;AACjD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,OAAO,IAAI;AAClD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,KAAK,KAAK;AACjD,QAAM,UAAU,uBAAuB,OAAO,IAAI;AAClD,QAAM,UAAU,uBAAuB,MAAM,IAAI;AACjD,QAAM,UAAU,uBAAuB,KAAK,KAAK;AACjD,QAAM,UAAU,uBAAuB,UAAU,IAAI;AACrD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,SAAS,IAAI;AACpD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,uBAAuB,KAAK,KAAK;AACjD,QAAM,UAAU,qBAAqB,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,OAAO,OAAO,KAAK;AACvF,QAAM,UAAU,uBAAuB,QAAQ,IAAI;AACnD,QAAM,UAAU,qBAAqB,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,OAAO,OAAO,KAAK;AACtE,QAAM,UAAU,uBAAuB,KAAK,KAAK;AACjD,QAAM,UAAU,qBAAqB,CAAC,GAAG,GAAG,MAAM,OAAO,KAAK;AAC9D,QAAM,UAAU,qBAAqB,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,OAAO,OAAO,KAAK;AACnG,QAAM,UAAU,qBAAqB,YAAY;AACjD,QAAM,UAAU,qBAAqB,CAAC,KAAK,KAAM,IAAI,GAAG,OAAO,OAAO,KAAK;AAE3E,WAAS,OAAO,IAAI;AAAK,WAAO;AAAA,EAAI;AACpC,WAAS,OAAO,QAAQ,MAAM,OAAO,OAAO,SAAS,SAASC,SAAQ,OAAO;AAAK,WAAO,EAAE,MAAM,UAAU,QAAQ,MAAM,OAAO,OAAO,SAAS,SAAS,QAAAA,SAAQ,MAAM;AAAA,EAAG;AAC1K,WAAS,OAAO,QAAQ,OAAO;AAAK,WAAO,EAAE,MAAM,iBAAiB,QAAQ,MAAM;AAAA,EAAG;AACrF,WAAS,OAAO,QAAQ;AAAK,WAAO,EAAE,MAAM,iBAAiB,QAAQ,OAAO,KAAK;AAAA,EAAG;AACpF,WAAS,OAAO,OAAO,QAAQ;AAAK,WAAO,EAAE,MAAM,UAAU,OAAO,OAAO;AAAA,EAAG;AAC9E,WAAS,OAAO,QAAQ;AAAK,WAAO,EAAE,MAAM,UAAU,OAAO,MAAM,OAAO;AAAA,EAAG;AAC7E,WAAS,SAAS;AAAK,WAAO,EAAE,MAAM,WAAW,MAAM,WAAW;AAAA,EAAG;AACrE,WAAS,OAAO,OAAO,OAAO;AAAK,WAAO,EAAE,MAAM,SAAS,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,MAAM;AAAA,EAAG;AACtG,WAAS,OAAO,OAAO;AAAK,WAAO;AAAA,EAAO;AAC1C,WAAS,OAAO,OAAO;AAAK,WAAO,EAAE,MAAM,SAAS,IAAI,MAAM,IAAI,OAAO,MAAM,OAAO,OAAO,KAAK;AAAA,EAAG;AACrG,WAAS,QAAQ,IAAI,OAAO;AAAK,WAAO,EAAE,IAAI,MAAM;AAAA,EAAG;AACvD,WAAS,QAAQ,QAAQ;AAAK,WAAO,EAAE,MAAM,YAAY,MAAM,SAAS,MAAM,CAAC,MAAM,EAAE;AAAA,EAAG;AAC1F,WAAS,QAAQ,QAAQ;AAAK,WAAO;AAAA,EAAQ;AAC7C,WAAS,UAAU;AAAK,WAAO;AAAA,EAAS;AACxC,WAAS,UAAU;AAAK,WAAO;AAAA,EAAc;AAC7C,WAAS,UAAU;AAAK,WAAO;AAAA,EAAe;AAC9C,WAAS,QAAQ,MAAM,QAAQ,GAAG;AAAK,WAAO;AAAA,EAAG;AACjD,WAAS,QAAQ,MAAM,QAAQ,WAAW;AAAK,WAAO;AAAA,MACjD,MAAM;AAAA,MACN,MAAM,QAAQ;AAAA,MACd;AAAA,MACA;AAAA,IACF;AAAA,EAAG;AACN,WAAS,QAAQ,GAAG;AAAK,WAAO,EAAE,MAAM,SAAS,WAAU,EAAE;AAAA,EAAG;AAChE,WAAS,QAAQ,GAAG;AAAK,WAAO;AAAA,EAAG;AACnC,WAAS,QAAQ,GAAG;AAAK,WAAO;AAAA,EAAG;AACnC,WAAS,UAAU;AAAK,WAAO;AAAA,EAAO;AACtC,WAAS,UAAU;AAAK,WAAO;AAAA,EAAQ;AACvC,WAAS,QAAQ,GAAG,GAAG;AAAK,WAAO;AAAA,EAAG;AACtC,WAAS,QAAQ,GAAG,WAAW;AAAK,WAAO,EAAE,MAAM,SAAS,QAAQ,GAAG,WAAW,aAAa,MAAM;AAAA,EAAG;AACxG,WAAS,QAAQ,GAAG;AAAK,WAAO;AAAA,EAAG;AACnC,WAAS,QAAQ,MAAM,OAAO;AAAK,WAAO,EAAE,MAAM,aAAa,MAAM,OAAO,MAAM,MAAM;AAAA,EAAG;AAC3F,WAAS,QAAQ,MAAM,OAAO;AAAK,WAAO,EAAE,MAAM,aAAa,MAAM,MAAM,MAAM,MAAM;AAAA,EAAG;AAC1F,WAAS,QAAQ,MAAM,OAAO;AAAK,WAAO,EAAE,MAAM,aAAa,MAAM,OAAO,MAAM,WAAW;AAAA,EAAG;AAChG,WAAS,QAAQC,QAAO;AAAK,WAAO,EAAE,MAAM,UAAU,MAAMA,OAAM;AAAA,EAAG;AACrE,WAAS,QAAQA,QAAO;AAAK,WAAO,EAAE,MAAM,SAAS,MAAMA,OAAM;AAAA,EAAG;AACpE,WAAS,QAAQA,QAAO;AAAK,WAAO,EAAE,MAAM,SAAS,YAAYA,OAAM;AAAA,EAAG;AAC1E,WAAS,UAAU;AAAK,WAAO,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,EAAG;AAClE,WAAS,QAAQ,GAAG;AAAK,WAAO,EAAE,MAAM,WAAW,MAAM,UAAU,OAAO,SAAS,CAAC,EAAE;AAAA,EAAG;AACzF,WAAS,QAAQ,OAAO;AAAK,WAAO,EAAE,MAAM,WAAW,MAAM,UAAU,MAAM;AAAA,EAAG;AAChF,WAAS,UAAU;AAAK,WAAO,EAAE,MAAM,cAAc,MAAM,KAAK,EAAE;AAAA,EAAG;AACrE,MAAI,cAAc,QAAQ,cAAc;AACxC,MAAI,eAAe;AACnB,QAAM,sBAAsB,CAAC,EAAE,MAAM,GAAG,QAAQ,EAAE,CAAC;AACnD,MAAI,iBAAiB;AACrB,MAAI,sBAAsB,QAAQ,uBAAuB,CAAC;AAC1D,MAAI,kBAAkB,QAAQ,kBAAkB;AAEhD,MAAI;AAEJ,MAAI,QAAQ,WAAW;AACrB,QAAI,EAAE,QAAQ,aAAa,yBAAyB;AAClD,YAAM,IAAI,MAAM,oCAAqC,QAAQ,YAAY,IAAK;AAAA,IAChF;AAEA,4BAAwB,uBAAuB,QAAQ,SAAS;AAAA,EAClE;AAEA,WAAS,OAAO;AACd,WAAO,MAAM,UAAU,cAAc,WAAW;AAAA,EAClD;AAEA,WAAS,SAAS;AAChB,WAAO;AAAA,EACT;AAEA,WAAS,QAAQ;AACf,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,KAAK;AAAA,IACP;AAAA,EACF;AAEA,WAAS,WAAW;AAClB,WAAO,oBAAoB,cAAc,WAAW;AAAA,EACtD;AAEA,WAAS,SAAS,aAAaC,WAAU;AACvC,IAAAA,YAAWA,cAAa,SACpBA,YACA,oBAAoB,cAAc,WAAW;AAEjD,UAAM;AAAA,MACJ,CAAC,qBAAqB,WAAW,CAAC;AAAA,MAClC,MAAM,UAAU,cAAc,WAAW;AAAA,MACzCA;AAAA,IACF;AAAA,EACF;AAEA,WAAS,MAAM,SAASA,WAAU;AAChC,IAAAA,YAAWA,cAAa,SACpBA,YACA,oBAAoB,cAAc,WAAW;AAEjD,UAAM,qBAAqB,SAASA,SAAQ;AAAA,EAC9C;AAEA,WAAS,eAAe,MAAM,aAAa;AACzC,UAAM,KAAK,MAAM,YAAY,GAAG;AAChC,QAAI,OAAO,QAAW;AACpB,aAAO;AAAA,IACT;AACA,WAAO,OAAO,cAAc,EAAE;AAAA,EAChC;AAEA,WAAS,uBAAuBC,OAAM,YAAY;AAChD,WAAO,EAAE,MAAM,WAAW,MAAAA,OAAM,WAAW;AAAA,EAC7C;AAEA,WAAS,qBAAqB,OAAO,UAAU,YAAY,SAAS;AAClE,WAAO,EAAE,MAAM,SAAS,OAAO,UAAU,YAAY,QAAQ;AAAA,EAC/D;AAEA,WAAS,qBAAqB;AAC5B,WAAO,EAAE,MAAM,MAAM;AAAA,EACvB;AAEA,WAAS,qBAAqB;AAC5B,WAAO,EAAE,MAAM,MAAM;AAAA,EACvB;AAEA,WAAS,qBAAqB,aAAa;AACzC,WAAO,EAAE,MAAM,SAAS,YAAY;AAAA,EACtC;AAEA,WAAS,sBAAsB,KAAK;AAClC,QAAI,UAAU,oBAAoB,GAAG;AACrC,QAAI;AAEJ,QAAI,SAAS;AACX,aAAO;AAAA,IACT,OAAO;AACL,UAAI,OAAO,oBAAoB,QAAQ;AACrC,YAAI,oBAAoB,SAAS;AAAA,MACnC,OAAO;AACL,YAAI;AACJ,eAAO,CAAC,oBAAoB,EAAE,CAAC,GAAG;AAAA,QAAC;AAAA,MACrC;AAEA,gBAAU,oBAAoB,CAAC;AAC/B,gBAAU;AAAA,QACR,MAAM,QAAQ;AAAA,QACd,QAAQ,QAAQ;AAAA,MAClB;AAEA,aAAO,IAAI,KAAK;AACd,YAAI,MAAM,WAAW,CAAC,MAAM,IAAI;AAC9B,kBAAQ;AACR,kBAAQ,SAAS;AAAA,QACnB,OAAO;AACL,kBAAQ;AAAA,QACV;AAEA;AAAA,MACF;AAEA,0BAAoB,GAAG,IAAI;AAE3B,aAAO;AAAA,IACT;AAAA,EACF;AAEA,WAAS,oBAAoB,UAAU,QAAQH,SAAQ;AACrD,UAAM,kBAAkB,sBAAsB,QAAQ;AACtD,UAAM,gBAAgB,sBAAsB,MAAM;AAElD,UAAM,MAAM;AAAA,MACV,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,gBAAgB;AAAA,QACtB,QAAQ,gBAAgB;AAAA,MAC1B;AAAA,MACA,KAAK;AAAA,QACH,QAAQ;AAAA,QACR,MAAM,cAAc;AAAA,QACpB,QAAQ,cAAc;AAAA,MACxB;AAAA,IACF;AACA,QAAIA,WAAU,cAAe,OAAO,WAAW,WAAW,YAAa;AACrE,UAAI,QAAQ,WAAW,OAAO,IAAI,KAAK;AACvC,UAAI,MAAM,WAAW,OAAO,IAAI,GAAG;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAEA,WAAS,SAASF,WAAU;AAC1B,QAAI,cAAc,gBAAgB;AAAE;AAAA,IAAQ;AAE5C,QAAI,cAAc,gBAAgB;AAChC,uBAAiB;AACjB,4BAAsB,CAAC;AAAA,IACzB;AAEA,wBAAoB,KAAKA,SAAQ;AAAA,EACnC;AAEA,WAAS,qBAAqB,SAASI,WAAU;AAC/C,WAAO,IAAI,gBAAgB,SAAS,MAAM,MAAMA,SAAQ;AAAA,EAC1D;AAEA,WAAS,yBAAyBJ,WAAU,OAAOI,WAAU;AAC3D,WAAO,IAAI;AAAA,MACT,gBAAgB,aAAaJ,WAAU,KAAK;AAAA,MAC5CA;AAAA,MACA;AAAA,MACAI;AAAA,IACF;AAAA,EACF;AAEA,WAAS,eAAe;AACtB,QAAI,IAAI,IAAI,IAAI;AAEhB,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK;AAAA,IACP;AACA,SAAK,gBAAgB;AACrB,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK;AAAA,MACP;AACA,qBAAe;AACf,WAAK,OAAO,EAAE;AAAA,IAChB,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK;AAEhE,SAAK;AACL,SAAK,MAAM,OAAO,aAAa,CAAC;AAChC,QAAI,GAAG,YAAY,MAAM,QAAQ;AAC/B,qBAAgB;AAAA,IAClB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,MAAM;AAAA,MAAG;AAAA,IACjD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK,mBAAmB;AACxB,YAAI,OAAO,YAAY;AACrB,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,iBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,gBAAI,GAAG,YAAY,MAAM,QAAQ;AAC/B,6BAAgB;AAAA,YAClB,OAAO;AACL,mBAAK;AACL,kBAAI,oBAAoB,GAAG;AAAE,yBAAS,MAAM;AAAA,cAAG;AAAA,YACjD;AACA,gBAAI,OAAO,YAAY;AACrB,mBAAK,YAAY;AACjB,kBAAI,OAAO,YAAY;AACrB,qBAAK,sBAAsB;AAC3B,oBAAI,OAAO,YAAY;AACrB,uBAAK,eAAe;AACpB,sBAAI,OAAO,YAAY;AACrB,yBAAK;AAAA,kBACP;AACA,uBAAK,eAAe;AACpB,sBAAI,OAAO,YAAY;AACrB,yBAAK;AAAA,kBACP;AACA,wBAAM,eAAe;AACrB,sBAAI,QAAQ,YAAY;AACtB,0BAAM;AAAA,kBACR;AACA,wBAAM,eAAe;AACrB,sBAAI,QAAQ,YAAY;AACtB,0BAAM;AAAA,kBACR;AACA,wBAAM,gBAAgB;AACtB,sBAAI,QAAQ,YAAY;AACtB,0BAAM;AAAA,kBACR;AACA,wBAAM,eAAe;AACrB,sBAAI,QAAQ,YAAY;AACtB,0BAAM;AAAA,kBACR;AACA,sBAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,0BAAM;AACN;AAAA,kBACF,OAAO;AACL,0BAAM;AACN,wBAAI,oBAAoB,GAAG;AAAE,+BAAS,MAAM;AAAA,oBAAG;AAAA,kBACjD;AACA,sBAAI,QAAQ,YAAY;AACtB,mCAAe;AACf,yBAAK,OAAO,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,GAAG;AAAA,kBAChD,OAAO;AACL,kCAAc;AACd,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AAAA,cACF,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,qBAAqB;AAC5B,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAExB,SAAK;AACL,SAAK,CAAC;AACN,SAAK,0BAA0B;AAC/B,WAAO,OAAO,YAAY;AACxB,SAAG,KAAK,EAAE;AACV,WAAK;AACL,WAAK;AACL,UAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,aAAK;AACL;AAAA,MACF,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,MAAM;AAAA,QAAG;AAAA,MACjD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,CAAC,IAAI,EAAE;AACZ,eAAK;AAAA,QACP,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,0BAA0B;AAC/B,YAAI,OAAO,YAAY;AACrB,wBAAc;AACd,eAAK;AAAA,QACP,OAAO;AACL,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,aAAK;AAAA,MACP;AAAA,IACF;AACA,QAAI,GAAG,SAAS,GAAG;AACjB,oBAAc;AACd,WAAK;AAAA,IACP,OAAO;AACL,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,4BAA4B;AACnC,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAExB,SAAK;AACL,SAAK,uBAAuB;AAC5B,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK,MAAM,OAAO,aAAa,CAAC;AAChC,YAAI,GAAG,YAAY,MAAM,QAAQ;AAC/B,yBAAgB;AAAA,QAClB,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,MAAM;AAAA,UAAG;AAAA,QACjD;AACA,YAAI,OAAO,YAAY;AACrB,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,iBAAK,oBAAoB;AACzB,gBAAI,OAAO,YAAY;AACrB,6BAAe;AACf,mBAAK,OAAO,IAAI,EAAE;AAAA,YACpB,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,uBAAuB;AAC5B,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,OAAO,EAAE;AAAA,MAChB;AACA,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,uBAAuB;AAC9B,QAAI,IAAI,IAAI,IAAI;AAEhB,SAAK;AACL,SAAK,oBAAoB;AACzB,QAAI,OAAO,YAAY;AACrB,UAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,aAAK;AACL;AAAA,MACF,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,MAAM;AAAA,QAAG;AAAA,MACjD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,oBAAoB;AACzB,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,OAAO,IAAI,EAAE;AAAA,QACpB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,oBAAoB;AACzB,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,OAAO,EAAE;AAAA,MAChB;AACA,WAAK;AACL,UAAI,OAAO,YAAY;AACrB,aAAK;AACL,YAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,eAAK;AACL;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,MAAM;AAAA,UAAG;AAAA,QACjD;AACA,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,OAAO;AAAA,QACd;AACA,aAAK;AAAA,MACP;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,8BAA8B;AACrC,QAAI,IAAI,IAAI,IAAI;AAEhB,SAAK;AACL,SAAK,oBAAoB;AACzB,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK,oBAAoB;AACzB,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,OAAO,IAAI,EAAE;AAAA,QACpB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,wBAAwB;AAC/B,QAAI,IAAI;AAER,SAAK;AACL,SAAK,4BAA4B;AACjC,QAAI,OAAO,YAAY;AACrB,qBAAe;AACf,WAAK,OAAO,EAAE;AAAA,IAChB;AACA,SAAK;AACL,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,oBAAoB;AACzB,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,OAAO,EAAE;AAAA,MAChB;AACA,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,sBAAsB;AAC7B,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAExB,SAAK;AACL,QAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,WAAK;AACL;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,MAAM;AAAA,MAAG;AAAA,IACjD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,oBAAoB;AACzB,UAAI,OAAO,YAAY;AACrB,YAAI,MAAM,OAAO,aAAa,CAAC,MAAM,QAAQ;AAC3C,eAAK;AACL,yBAAe;AAAA,QACjB,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,MAAM;AAAA,UAAG;AAAA,QACjD;AACA,YAAI,OAAO,YAAY;AACrB,eAAK,oBAAoB;AACzB,cAAI,OAAO,YAAY;AACrB,gBAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,mBAAK;AACL;AAAA,YACF,OAAO;AACL,mBAAK;AACL,kBAAI,oBAAoB,GAAG;AAAE,yBAAS,MAAM;AAAA,cAAG;AAAA,YACjD;AACA,gBAAI,OAAO,YAAY;AACrB,6BAAe;AACf,mBAAK,QAAQ,IAAI,EAAE;AAAA,YACrB,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,yBAAyB;AAChC,QAAI,IAAI,IAAI,IAAI;AAEhB,SAAK;AACL,QAAI,MAAM,OAAO,aAAa,CAAC,MAAM,SAAS;AAC5C,WAAK;AACL,qBAAe;AAAA,IACjB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,qBAAqB;AAC1B,UAAI,OAAO,YAAY;AACrB,YAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,eAAK;AACL;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,QAAQ,EAAE;AAAA,QACjB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,qBAAqB;AAC1B,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,QAAQ,EAAE;AAAA,MACjB;AACA,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI;AAER,SAAK,CAAC;AACN,SAAK,cAAc;AACnB,QAAI,OAAO,YAAY;AACrB,aAAO,OAAO,YAAY;AACxB,WAAG,KAAK,EAAE;AACV,aAAK,cAAc;AAAA,MACrB;AAAA,IACF,OAAO;AACL,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,oBAAoB;AAC3B,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,SAAK,MAAM,OAAO,aAAa,CAAC;AAChC,QAAI,GAAG,YAAY,MAAM,SAAS;AAChC,qBAAgB;AAAA,IAClB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,QAAQ;AAAA,MACf,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK;AACL,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,CAAC,IAAI,EAAE;AACZ,iBAAK;AAAA,UACP,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AACA,YAAI,OAAO,YAAY;AACrB,eAAK;AAAA,QACP;AACA,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,QAAQ;AAAA,QACf,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK;AACL,aAAK,MAAM,OAAO,aAAa,CAAC;AAChC,YAAI,GAAG,YAAY,MAAM,SAAS;AAChC,yBAAgB;AAAA,QAClB,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,eAAK;AACL,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,iBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,gBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,6BAAgB;AAAA,YAClB,OAAO;AACL,mBAAK;AACL,kBAAI,oBAAoB,GAAG;AAAE,yBAAS,OAAO;AAAA,cAAG;AAAA,YAClD;AACA,gBAAI,OAAO,YAAY;AACrB,mBAAK,CAAC,IAAI,EAAE;AACZ,mBAAK;AAAA,YACP,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK;AAAA,UACP;AACA,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,2BAAe;AACf,iBAAK,QAAQ;AAAA,UACf,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,gBAAgB;AACvB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAE5C,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,kBAAkB;AACvB,UAAI,OAAO,YAAY;AACrB,aAAK;AAAA,MACP;AACA,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,4BAA4B;AACjC,cAAI,OAAO,YAAY;AACrB,iBAAK;AACL,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,kBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,+BAAgB;AAAA,cAClB,OAAO;AACL,qBAAK;AACL,oBAAI,oBAAoB,GAAG;AAAE,2BAAS,OAAO;AAAA,gBAAG;AAAA,cAClD;AACA,kBAAI,OAAO,YAAY;AACrB,qBAAK,YAAY;AACjB,oBAAI,OAAO,YAAY;AACrB,wBAAM,4BAA4B;AAClC,sBAAI,QAAQ,YAAY;AACtB,mCAAe;AACf,yBAAK,QAAQ,IAAI,IAAI,GAAG;AAAA,kBAC1B,OAAO;AACL,kCAAc;AACd,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AAAA,cACF,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AACA,gBAAI,OAAO,YAAY;AACrB,mBAAK;AAAA,YACP;AACA,2BAAe;AACf,iBAAK,QAAQ,IAAI,IAAI,EAAE;AAAA,UACzB,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,oBAAoB;AACzB,cAAI,OAAO,YAAY;AACrB,2BAAe;AACf,iBAAK,QAAQ,EAAE;AAAA,UACjB,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;AAEjD,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK;AACL,mBAAK,CAAC;AACN,mBAAK,qBAAqB;AAC1B,qBAAO,OAAO,YAAY;AACxB,mBAAG,KAAK,EAAE;AACV,qBAAK;AACL,qBAAK;AACL,oBAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,wBAAM;AACN;AAAA,gBACF,OAAO;AACL,wBAAM;AACN,sBAAI,oBAAoB,GAAG;AAAE,6BAAS,MAAM;AAAA,kBAAG;AAAA,gBACjD;AACA,oBAAI,QAAQ,YAAY;AACtB,wBAAM,YAAY;AAClB,sBAAI,QAAQ,YAAY;AACtB,0BAAM,CAAC,KAAK,GAAG;AACf,yBAAK;AAAA,kBACP,OAAO;AACL,kCAAc;AACd,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AACA,oBAAI,OAAO,YAAY;AACrB,uBAAK,qBAAqB;AAC1B,sBAAI,OAAO,YAAY;AACrB,kCAAc;AACd,yBAAK;AAAA,kBACP,OAAO;AACL,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,uBAAK;AAAA,gBACP;AAAA,cACF;AACA,kBAAI,GAAG,SAAS,GAAG;AACjB,8BAAc;AACd,qBAAK;AAAA,cACP,OAAO;AACL,qBAAK;AAAA,cACP;AACA,kBAAI,OAAO,YAAY;AACrB,+BAAe;AACf,qBAAK,QAAQ,EAAE;AAAA,cACjB,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;AAEjD,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK;AACL,mBAAK,CAAC;AACN,mBAAK,wBAAwB;AAC7B,qBAAO,OAAO,YAAY;AACxB,mBAAG,KAAK,EAAE;AACV,qBAAK;AACL,qBAAK;AACL,oBAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,wBAAM;AACN;AAAA,gBACF,OAAO;AACL,wBAAM;AACN,sBAAI,oBAAoB,GAAG;AAAE,6BAAS,MAAM;AAAA,kBAAG;AAAA,gBACjD;AACA,oBAAI,QAAQ,YAAY;AACtB,wBAAM,YAAY;AAClB,sBAAI,QAAQ,YAAY;AACtB,0BAAM,CAAC,KAAK,GAAG;AACf,yBAAK;AAAA,kBACP,OAAO;AACL,kCAAc;AACd,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AACA,oBAAI,OAAO,YAAY;AACrB,uBAAK,wBAAwB;AAC7B,sBAAI,OAAO,YAAY;AACrB,kCAAc;AACd,yBAAK;AAAA,kBACP,OAAO;AACL,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,uBAAK;AAAA,gBACP;AAAA,cACF;AACA,kBAAI,GAAG,SAAS,GAAG;AACjB,8BAAc;AACd,qBAAK;AAAA,cACP,OAAO;AACL,qBAAK;AAAA,cACP;AACA,kBAAI,OAAO,YAAY;AACrB,+BAAe;AACf,qBAAK,QAAQ,EAAE;AAAA,cACjB,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,0BAA0B;AACjC,QAAI,IAAI;AAER,SAAK;AACL,SAAK,MAAM,OAAO,aAAa,CAAC;AAChC,QAAI,GAAG,YAAY,MAAM,SAAS;AAChC,qBAAgB;AAAA,IAClB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,qBAAe;AACf,WAAK,QAAQ;AAAA,IACf;AACA,SAAK;AACL,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,QAAQ;AAAA,MACf;AACA,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,0BAA0B;AACjC,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,SAAK,qBAAqB;AAC1B,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK,wBAAwB;AAC7B,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,QAAQ,IAAI,EAAE;AAAA,QACrB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK;AAAA,MACP;AACA,qBAAe;AACf,WAAK,QAAQ,IAAI,EAAE;AAAA,IACrB,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,sBAAsB;AAC7B,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAExB,SAAK;AACL,QAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,WAAK;AACL;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,aAAK;AAAA,MACP;AACA,WAAK,oBAAoB;AACzB,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK;AAAA,QACP;AACA,YAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,eAAK;AACL;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,QAAQ,EAAE;AAAA,QACjB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,4BAA4B;AACjC,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK,oBAAoB;AACzB,kBAAI,OAAO,YAAY;AACrB,+BAAe;AACf,qBAAK,QAAQ,IAAI,EAAE;AAAA,cACrB,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK;AACL,aAAK,4BAA4B;AACjC,YAAI,OAAO,YAAY;AACrB,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,iBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,gBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,6BAAgB;AAAA,YAClB,OAAO;AACL,mBAAK;AACL,kBAAI,oBAAoB,GAAG;AAAE,yBAAS,OAAO;AAAA,cAAG;AAAA,YAClD;AACA,gBAAI,OAAO,YAAY;AACrB,mBAAK,YAAY;AACjB,kBAAI,OAAO,YAAY;AACrB,qBAAK,oBAAoB;AACzB,oBAAI,OAAO,YAAY;AACrB,iCAAe;AACf,uBAAK,QAAQ,IAAI,EAAE;AAAA,gBACrB,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AAAA,cACF,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AACA,YAAI,OAAO,YAAY;AACrB,eAAK,4BAA4B;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,8BAA8B;AACrC,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAExB,SAAK;AACL,SAAK,qBAAqB;AAC1B,QAAI,OAAO,YAAY;AACrB,WAAK,YAAY;AACjB,UAAI,OAAO,YAAY;AACrB,YAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,eAAK;AACL;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,eAAK,YAAY;AACjB,cAAI,OAAO,YAAY;AACrB,iBAAK,iBAAiB;AACtB,gBAAI,OAAO,YAAY;AACrB,mBAAK,eAAe;AACpB,kBAAI,OAAO,YAAY;AACrB,qBAAK,qBAAqB;AAAA,cAC5B;AAAA,YACF;AACA,gBAAI,OAAO,YAAY;AACrB,6BAAe;AACf,mBAAK,QAAQ,IAAI,EAAE;AAAA,YACrB,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAE5B,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,eAAe;AACpB,cAAI,OAAO,YAAY;AACrB,iBAAK,gBAAgB;AAAA,UACvB;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,kBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,+BAAgB;AAAA,cAClB,OAAO;AACL,qBAAK;AACL,oBAAI,oBAAoB,GAAG;AAAE,2BAAS,OAAO;AAAA,gBAAG;AAAA,cAClD;AACA,kBAAI,OAAO,YAAY;AACrB,+BAAe;AACf,qBAAK,QAAQ,EAAE;AAAA,cACjB,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAE5C,SAAK;AACL,SAAK,YAAY;AACjB,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,SAAS;AAChC,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,YAAY;AACjB,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,YAAY;AACjB,gBAAI,OAAO,YAAY;AACrB,mBAAK,eAAe;AACpB,kBAAI,OAAO,YAAY;AACrB,qBAAK,gBAAgB;AAAA,cACvB;AACA,kBAAI,OAAO,YAAY;AACrB,qBAAK,YAAY;AACjB,oBAAI,OAAO,YAAY;AACrB,uBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,sBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,mCAAgB;AAAA,kBAClB,OAAO;AACL,yBAAK;AACL,wBAAI,oBAAoB,GAAG;AAAE,+BAAS,OAAO;AAAA,oBAAG;AAAA,kBAClD;AACA,sBAAI,OAAO,YAAY;AACrB,yBAAK,YAAY;AACjB,wBAAI,OAAO,YAAY;AACrB,4BAAM,MAAM,OAAO,aAAa,CAAC;AACjC,0BAAI,IAAI,YAAY,MAAM,SAAS;AACjC,uCAAgB;AAAA,sBAClB,OAAO;AACL,8BAAM;AACN,4BAAI,oBAAoB,GAAG;AAAE,mCAAS,OAAO;AAAA,wBAAG;AAAA,sBAClD;AACA,0BAAI,QAAQ,YAAY;AACtB,uCAAe;AACf,6BAAK,QAAQ,EAAE;AAAA,sBACjB,OAAO;AACL,sCAAc;AACd,6BAAK;AAAA,sBACP;AAAA,oBACF,OAAO;AACL,oCAAc;AACd,2BAAK;AAAA,oBACP;AAAA,kBACF,OAAO;AACL,kCAAc;AACd,yBAAK;AAAA,kBACP;AAAA,gBACF,OAAO;AACL,gCAAc;AACd,uBAAK;AAAA,gBACP;AAAA,cACF,OAAO;AACL,8BAAc;AACd,qBAAK;AAAA,cACP;AAAA,YACF,OAAO;AACL,4BAAc;AACd,mBAAK;AAAA,YACP;AAAA,UACF,OAAO;AACL,0BAAc;AACd,iBAAK;AAAA,UACP;AAAA,QACF,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,iBAAiB;AACxB,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,QAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,WAAK;AACL;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,CAAC;AACN,WAAK,MAAM,OAAO,WAAW;AAC7B,UAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,MACF,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,eAAO,OAAO,YAAY;AACxB,aAAG,KAAK,EAAE;AACV,eAAK,MAAM,OAAO,WAAW;AAC7B,cAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,UACF,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AAAA,QACF;AAAA,MACF,OAAO;AACL,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,MAAM,UAAU,IAAI,WAAW;AAAA,MACtC,OAAO;AACL,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,uBAAe;AACf,aAAK,QAAQ,EAAE;AAAA,MACjB,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,mBAAmB;AAC1B,QAAI;AAEJ,SAAK,cAAc;AACnB,QAAI,OAAO,YAAY;AACrB,WAAK,gBAAgB;AACrB,UAAI,OAAO,YAAY;AACrB,aAAK,gBAAgB;AAAA,MACvB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,gBAAgB;AACvB,QAAI,IAAI;AAER,SAAK;AACL,SAAK,MAAM,OAAO,aAAa,CAAC;AAChC,QAAI,GAAG,YAAY,MAAM,SAAS;AAChC,qBAAgB;AAAA,IAClB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,qBAAe;AACf,WAAK,QAAQ;AAAA,IACf;AACA,SAAK;AAEL,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,QAAI,IAAI,IAAI,IAAI;AAEhB,SAAK;AACL,SAAK;AACL,SAAK,CAAC;AACN,SAAK,MAAM,OAAO,WAAW;AAC7B,QAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,aAAO,OAAO,YAAY;AACxB,WAAG,KAAK,EAAE;AACV,aAAK,MAAM,OAAO,WAAW;AAC7B,YAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AAAA,MACF;AAAA,IACF,OAAO;AACL,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,UAAU,IAAI,WAAW;AAAA,IACtC,OAAO;AACL,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,qBAAe;AACf,WAAK,QAAQ,EAAE;AAAA,IACjB;AACA,SAAK;AAEL,WAAO;AAAA,EACT;AAEA,WAAS,kBAAkB;AACzB,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,QAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,WAAK;AACL;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,WAAK,CAAC;AACN,WAAK,MAAM,OAAO,WAAW;AAC7B,UAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,MACF,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,eAAO,OAAO,YAAY;AACxB,aAAG,KAAK,EAAE;AACV,eAAK,MAAM,OAAO,WAAW;AAC7B,cAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,UACF,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AAAA,QACF;AAAA,MACF,OAAO;AACL,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,MAAM,UAAU,IAAI,WAAW;AAAA,MACtC,OAAO;AACL,aAAK;AAAA,MACP;AACA,UAAI,OAAO,YAAY;AACrB,YAAI,MAAM,WAAW,WAAW,MAAM,IAAI;AACxC,eAAK;AACL;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,yBAAe;AACf,eAAK,QAAQ,EAAE;AAAA,QACjB,OAAO;AACL,wBAAc;AACd,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,sBAAsB;AAC7B,QAAI,IAAI,IAAI,IAAI,IAAI;AAEpB,SAAK;AACL,SAAK;AACL;AACA,SAAK,iBAAiB;AACtB;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AAAA,IACP,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,WAAW;AAC7B,UAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,MACF,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,OAAO;AAAA,QAAG;AAAA,MAClD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,CAAC;AACN,aAAK,MAAM,OAAO,WAAW;AAC7B,YAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,eAAO,OAAO,YAAY;AACxB,aAAG,KAAK,EAAE;AACV,eAAK,MAAM,OAAO,WAAW;AAC7B,cAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,UACF,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AAAA,QACF;AACA,uBAAe;AACf,aAAK,QAAQ;AAAA,MACf,OAAO;AACL,sBAAc;AACd,aAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,oBAAc;AACd,WAAK;AAAA,IACP;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,mBAAmB;AAC1B,QAAI;AAEJ,SAAK,MAAM,OAAO,aAAa,CAAC;AAChC,QAAI,GAAG,YAAY,MAAM,SAAS;AAChC,qBAAgB;AAAA,IAClB,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,WAAK,MAAM,OAAO,aAAa,CAAC;AAChC,UAAI,GAAG,YAAY,MAAM,QAAQ;AAC/B,uBAAgB;AAAA,MAClB,OAAO;AACL,aAAK;AACL,YAAI,oBAAoB,GAAG;AAAE,mBAAS,MAAM;AAAA,QAAG;AAAA,MACjD;AACA,UAAI,OAAO,YAAY;AACrB,aAAK,MAAM,OAAO,aAAa,CAAC;AAChC,YAAI,GAAG,YAAY,MAAM,SAAS;AAChC,yBAAgB;AAAA,QAClB,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AACA,YAAI,OAAO,YAAY;AACrB,eAAK,MAAM,OAAO,aAAa,CAAC;AAChC,cAAI,GAAG,YAAY,MAAM,SAAS;AAChC,2BAAgB;AAAA,UAClB,OAAO;AACL,iBAAK;AACL,gBAAI,oBAAoB,GAAG;AAAE,uBAAS,OAAO;AAAA,YAAG;AAAA,UAClD;AACA,cAAI,OAAO,YAAY;AACrB,iBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,gBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,6BAAgB;AAAA,YAClB,OAAO;AACL,mBAAK;AACL,kBAAI,oBAAoB,GAAG;AAAE,yBAAS,OAAO;AAAA,cAAG;AAAA,YAClD;AACA,gBAAI,OAAO,YAAY;AACrB,mBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,kBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,+BAAgB;AAAA,cAClB,OAAO;AACL,qBAAK;AACL,oBAAI,oBAAoB,GAAG;AAAE,2BAAS,OAAO;AAAA,gBAAG;AAAA,cAClD;AACA,kBAAI,OAAO,YAAY;AACrB,qBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,oBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,iCAAgB;AAAA,gBAClB,OAAO;AACL,uBAAK;AACL,sBAAI,oBAAoB,GAAG;AAAE,6BAAS,OAAO;AAAA,kBAAG;AAAA,gBAClD;AACA,oBAAI,OAAO,YAAY;AACrB,uBAAK,MAAM,OAAO,aAAa,CAAC;AAChC,sBAAI,GAAG,YAAY,MAAM,SAAS;AAChC,mCAAgB;AAAA,kBAClB,OAAO;AACL,yBAAK;AACL,wBAAI,oBAAoB,GAAG;AAAE,+BAAS,OAAO;AAAA,oBAAG;AAAA,kBAClD;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,cAAc;AACrB,QAAI,IAAI;AAER;AACA,SAAK,CAAC;AACN,SAAK,MAAM,OAAO,WAAW;AAC7B,QAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,IACF,OAAO;AACL,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AACA,QAAI,OAAO,YAAY;AACrB,aAAO,OAAO,YAAY;AACxB,WAAG,KAAK,EAAE;AACV,aAAK,MAAM,OAAO,WAAW;AAC7B,YAAI,OAAO,KAAK,EAAE,GAAG;AACnB;AAAA,QACF,OAAO;AACL,eAAK;AACL,cAAI,oBAAoB,GAAG;AAAE,qBAAS,OAAO;AAAA,UAAG;AAAA,QAClD;AAAA,MACF;AAAA,IACF,OAAO;AACL,WAAK;AAAA,IACP;AACA;AACA,QAAI,OAAO,YAAY;AACrB,WAAK;AACL,UAAI,oBAAoB,GAAG;AAAE,iBAAS,OAAO;AAAA,MAAG;AAAA,IAClD;AAEA,WAAO;AAAA,EACT;AAEA,eAAa,sBAAsB;AAEnC,QAAM,cAAe,eAAe,cAAc,gBAAgB,MAAM;AACxE,WAAS,YAAY;AACnB,QAAI,eAAe,cAAc,cAAc,MAAM,QAAQ;AAC3D,eAAS,mBAAmB,CAAC;AAAA,IAC/B;AAEA,UAAM;AAAA,MACJ;AAAA,MACA,iBAAiB,MAAM,SAAS,eAAe,cAAc,IAAI;AAAA,MACjE,iBAAiB,MAAM,SACnB,oBAAoB,gBAAgB,iBAAiB,CAAC,IACtD,oBAAoB,gBAAgB,cAAc;AAAA,IACxD;AAAA,EACF;AACA,MAAI,QAAQ,aAAa;AACvB;AAAA;AAAA,MAA2B;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,WAAW,cAAc,SAAY;AAAA,MACvC;AAAA;AAAA,EACF;AACA,MAAI,aAAa;AACf,WAAO;AAAA,EACT,OAAO;AACL,cAAU;AAAA,EACZ;AACF;AAEA,OAAO,UAAU;AAAA,EACf,YAAY,CAAC,KAAK;AAAA,EAClB,aAAa;AAAA,EACb,OAAO;AACT;;;ACzoEO,IAAM,sBAAsB,CAAC,UAAiC;AACnE,MAAI;AACF,WAAO,SAAM,KAAK;AAAA,EACpB,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,UAAM;AAAA,EACR;AACF;","names":["s","expected","found","offset","input","location","text"]}